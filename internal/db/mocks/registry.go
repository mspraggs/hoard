// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	db "github.com/mspraggs/hoard/internal/db"
)

// MockClock is a mock of Clock interface.
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
}

// MockClockMockRecorder is the mock recorder for MockClock.
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance.
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockClock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockClockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
}

// MockInTransactioner is a mock of InTransactioner interface.
type MockInTransactioner struct {
	ctrl     *gomock.Controller
	recorder *MockInTransactionerMockRecorder
}

// MockInTransactionerMockRecorder is the mock recorder for MockInTransactioner.
type MockInTransactionerMockRecorder struct {
	mock *MockInTransactioner
}

// NewMockInTransactioner creates a new mock instance.
func NewMockInTransactioner(ctrl *gomock.Controller) *MockInTransactioner {
	mock := &MockInTransactioner{ctrl: ctrl}
	mock.recorder = &MockInTransactionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInTransactioner) EXPECT() *MockInTransactionerMockRecorder {
	return m.recorder
}

// InTransaction mocks base method.
func (m *MockInTransactioner) InTransaction(ctx context.Context, fn db.TxnFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// InTransaction indicates an expected call of InTransaction.
func (mr *MockInTransactionerMockRecorder) InTransaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InTransaction", reflect.TypeOf((*MockInTransactioner)(nil).InTransaction), ctx, fn)
}

// MockLatestFetcher is a mock of LatestFetcher interface.
type MockLatestFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockLatestFetcherMockRecorder
}

// MockLatestFetcherMockRecorder is the mock recorder for MockLatestFetcher.
type MockLatestFetcherMockRecorder struct {
	mock *MockLatestFetcher
}

// NewMockLatestFetcher creates a new mock instance.
func NewMockLatestFetcher(ctrl *gomock.Controller) *MockLatestFetcher {
	mock := &MockLatestFetcher{ctrl: ctrl}
	mock.recorder = &MockLatestFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLatestFetcher) EXPECT() *MockLatestFetcherMockRecorder {
	return m.recorder
}

// FetchLatest mocks base method.
func (m *MockLatestFetcher) FetchLatest(ctx context.Context, tx db.Tx, path string) (*db.FileRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatest", ctx, tx, path)
	ret0, _ := ret[0].(*db.FileRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLatest indicates an expected call of FetchLatest.
func (mr *MockLatestFetcherMockRecorder) FetchLatest(ctx, tx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatest", reflect.TypeOf((*MockLatestFetcher)(nil).FetchLatest), ctx, tx, path)
}

// MockCreator is a mock of Creator interface.
type MockCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorMockRecorder
}

// MockCreatorMockRecorder is the mock recorder for MockCreator.
type MockCreatorMockRecorder struct {
	mock *MockCreator
}

// NewMockCreator creates a new mock instance.
func NewMockCreator(ctrl *gomock.Controller) *MockCreator {
	mock := &MockCreator{ctrl: ctrl}
	mock.recorder = &MockCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreator) EXPECT() *MockCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreator) Create(ctx context.Context, tx db.Tx, file *db.FileRow) (*db.FileRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, file)
	ret0, _ := ret[0].(*db.FileRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCreatorMockRecorder) Create(ctx, tx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreator)(nil).Create), ctx, tx, file)
}

// MockIDGenerator is a mock of IDGenerator interface.
type MockIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIDGeneratorMockRecorder
}

// MockIDGeneratorMockRecorder is the mock recorder for MockIDGenerator.
type MockIDGeneratorMockRecorder struct {
	mock *MockIDGenerator
}

// NewMockIDGenerator creates a new mock instance.
func NewMockIDGenerator(ctrl *gomock.Controller) *MockIDGenerator {
	mock := &MockIDGenerator{ctrl: ctrl}
	mock.recorder = &MockIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDGenerator) EXPECT() *MockIDGeneratorMockRecorder {
	return m.recorder
}

// GenerateID mocks base method.
func (m *MockIDGenerator) GenerateID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateID indicates an expected call of GenerateID.
func (mr *MockIDGeneratorMockRecorder) GenerateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateID", reflect.TypeOf((*MockIDGenerator)(nil).GenerateID))
}
