// Code generated by MockGen. DO NOT EDIT.
// Source: single_uploader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockSingleClient is a mock of SingleClient interface.
type MockSingleClient struct {
	ctrl     *gomock.Controller
	recorder *MockSingleClientMockRecorder
}

// MockSingleClientMockRecorder is the mock recorder for MockSingleClient.
type MockSingleClientMockRecorder struct {
	mock *MockSingleClient
}

// NewMockSingleClient creates a new mock instance.
func NewMockSingleClient(ctrl *gomock.Controller) *MockSingleClient {
	mock := &MockSingleClient{ctrl: ctrl}
	mock.recorder = &MockSingleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleClient) EXPECT() *MockSingleClientMockRecorder {
	return m.recorder
}

// PutObject mocks base method.
func (m *MockSingleClient) PutObject(ctx context.Context, input *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutObject", varargs...)
	ret0, _ := ret[0].(*s3.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockSingleClientMockRecorder) PutObject(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockSingleClient)(nil).PutObject), varargs...)
}
