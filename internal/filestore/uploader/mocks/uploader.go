// Code generated by MockGen. DO NOT EDIT.
// Source: uploader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/mspraggs/hoard/internal/filestore/models"
	uploader "github.com/mspraggs/hoard/internal/filestore/uploader"
	models0 "github.com/mspraggs/hoard/internal/models"
)

// MockChecksummer is a mock of Checksummer interface.
type MockChecksummer struct {
	ctrl     *gomock.Controller
	recorder *MockChecksummerMockRecorder
}

// MockChecksummerMockRecorder is the mock recorder for MockChecksummer.
type MockChecksummerMockRecorder struct {
	mock *MockChecksummer
}

// NewMockChecksummer creates a new mock instance.
func NewMockChecksummer(ctrl *gomock.Controller) *MockChecksummer {
	mock := &MockChecksummer{ctrl: ctrl}
	mock.recorder = &MockChecksummerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecksummer) EXPECT() *MockChecksummerMockRecorder {
	return m.recorder
}

// Checksum mocks base method.
func (m *MockChecksummer) Checksum(reader io.Reader) (models0.Checksum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checksum", reader)
	ret0, _ := ret[0].(models0.Checksum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checksum indicates an expected call of Checksum.
func (mr *MockChecksummerMockRecorder) Checksum(reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checksum", reflect.TypeOf((*MockChecksummer)(nil).Checksum), reader)
}

// MockUploader is a mock of Uploader interface.
type MockUploader struct {
	ctrl     *gomock.Controller
	recorder *MockUploaderMockRecorder
}

// MockUploaderMockRecorder is the mock recorder for MockUploader.
type MockUploaderMockRecorder struct {
	mock *MockUploader
}

// NewMockUploader creates a new mock instance.
func NewMockUploader(ctrl *gomock.Controller) *MockUploader {
	mock := &MockUploader{ctrl: ctrl}
	mock.recorder = &MockUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploader) EXPECT() *MockUploaderMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockUploader) Upload(ctx context.Context, file io.Reader, csc uploader.Checksummer, upload *models.FileUpload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, file, csc, upload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockUploaderMockRecorder) Upload(ctx, file, csc, upload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockUploader)(nil).Upload), ctx, file, csc, upload)
}
