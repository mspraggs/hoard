// Code generated by MockGen. DO NOT EDIT.
// Source: fileuploadhandler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/mspraggs/hoard/internal/models"
)

// MockFileRegistry is a mock of FileRegistry interface.
type MockFileRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockFileRegistryMockRecorder
}

// MockFileRegistryMockRecorder is the mock recorder for MockFileRegistry.
type MockFileRegistryMockRecorder struct {
	mock *MockFileRegistry
}

// NewMockFileRegistry creates a new mock instance.
func NewMockFileRegistry(ctrl *gomock.Controller) *MockFileRegistry {
	mock := &MockFileRegistry{ctrl: ctrl}
	mock.recorder = &MockFileRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRegistry) EXPECT() *MockFileRegistryMockRecorder {
	return m.recorder
}

// GetUploadedFileUpload mocks base method.
func (m *MockFileRegistry) GetUploadedFileUpload(ctx context.Context, ID string) (*models.FileUpload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadedFileUpload", ctx, ID)
	ret0, _ := ret[0].(*models.FileUpload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadedFileUpload indicates an expected call of GetUploadedFileUpload.
func (mr *MockFileRegistryMockRecorder) GetUploadedFileUpload(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadedFileUpload", reflect.TypeOf((*MockFileRegistry)(nil).GetUploadedFileUpload), ctx, ID)
}

// MarkFileUploadUploaded mocks base method.
func (m *MockFileRegistry) MarkFileUploadUploaded(ctx context.Context, fileUpload *models.FileUpload) (*models.FileUpload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFileUploadUploaded", ctx, fileUpload)
	ret0, _ := ret[0].(*models.FileUpload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkFileUploadUploaded indicates an expected call of MarkFileUploadUploaded.
func (mr *MockFileRegistryMockRecorder) MarkFileUploadUploaded(ctx, fileUpload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFileUploadUploaded", reflect.TypeOf((*MockFileRegistry)(nil).MarkFileUploadUploaded), ctx, fileUpload)
}

// RegisterFileUpload mocks base method.
func (m *MockFileRegistry) RegisterFileUpload(ctx context.Context, fileUpload *models.FileUpload) (*models.FileUpload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFileUpload", ctx, fileUpload)
	ret0, _ := ret[0].(*models.FileUpload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterFileUpload indicates an expected call of RegisterFileUpload.
func (mr *MockFileRegistryMockRecorder) RegisterFileUpload(ctx, fileUpload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFileUpload", reflect.TypeOf((*MockFileRegistry)(nil).RegisterFileUpload), ctx, fileUpload)
}

// MockFileStore is a mock of FileStore interface.
type MockFileStore struct {
	ctrl     *gomock.Controller
	recorder *MockFileStoreMockRecorder
}

// MockFileStoreMockRecorder is the mock recorder for MockFileStore.
type MockFileStoreMockRecorder struct {
	mock *MockFileStore
}

// NewMockFileStore creates a new mock instance.
func NewMockFileStore(ctrl *gomock.Controller) *MockFileStore {
	mock := &MockFileStore{ctrl: ctrl}
	mock.recorder = &MockFileStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStore) EXPECT() *MockFileStoreMockRecorder {
	return m.recorder
}

// StoreFileUpload mocks base method.
func (m *MockFileStore) StoreFileUpload(ctx context.Context, FileUpload *models.FileUpload) (*models.FileUpload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreFileUpload", ctx, FileUpload)
	ret0, _ := ret[0].(*models.FileUpload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreFileUpload indicates an expected call of StoreFileUpload.
func (mr *MockFileStoreMockRecorder) StoreFileUpload(ctx, FileUpload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFileUpload", reflect.TypeOf((*MockFileStore)(nil).StoreFileUpload), ctx, FileUpload)
}
